{"version":3,"file":"static/js/810.540ff938.chunk.js","mappings":"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","sources":["domain/GPX/index.ts","domain/GPX/colors.ts","components/GPXPathViewer/GPXDetailViewModal/GPXMapLine.tsx","components/GPXPathViewer/GPXDetailViewModal/GPXMapUserLocationPin.tsx","components/GPXPathViewer/GPXDetailViewModal/GPXMapView.tsx","components/GPXPathViewer/GPXDetailViewModal/GPXElevationChart/useElevationChartOption.ts","components/GPXPathViewer/GPXDetailViewModal/GPXElevationChart/index.tsx","components/GPXPathViewer/GPXDetailViewModal/GPXStatistics.tsx","components/GPXPathViewer/GPXDetailViewModal/index.tsx","components/GPXPathViewer/index.tsx","components/Input/GPXInput/index.tsx","components/CreateCardioExerciseRecordModal/GPXFilePicker.tsx"],"sourcesContent":["import { XMLParser } from \"fast-xml-parser\";\nimport NumberUtils from \"../../utils/Number\";\nimport ArrayUtils from \"../../utils/Array\";\n\nexport type RawGPXTrackPoint = {\n  \"@_lat\": number;\n  \"@_lon\": number;\n  ele?: number;\n};\n\nexport type RawGPXFile = {\n  gpx: {\n    trk: {\n      name: string;\n      trkseg: {\n        trkpt: RawGPXTrackPoint[];\n      };\n    };\n  };\n};\n\nexport type GPXPoint = {\n  lat: number;\n  lon: number;\n  elevation: number | null;\n};\n\nexport type GPX = {\n  name: string;\n  points: GPXPoint[];\n};\nexport type GPXStatistics = {\n  minElevation: number | null;\n  maxElevation: number | null;\n  lengthKm: number;\n  elevationGain: number;\n  elevationLoss: number;\n};\n\nexport type GPXViewport = {\n  center: [number, number];\n  bounds: [[number, number], [number, number]];\n};\n\nexport const gpxToPath = (rawGpx: RawGPXFile): GPX => {\n  return {\n    name: rawGpx.gpx.trk.name,\n    points: rawGpx.gpx.trk.trkseg.trkpt.map((point) => ({\n      lat: parseFloat(point[\"@_lat\"].toString()),\n      lon: parseFloat(point[\"@_lon\"].toString()),\n      elevation: point.ele ?? null,\n    })),\n  };\n};\n\nconst distance = (from: GPXPoint, to: GPXPoint) => {\n  const { lat: lat1, lon: lon1 } = from;\n  const { lat: lat2, lon: lon2 } = to;\n\n  // https://stackoverflow.com/a/21623206\n  const p = 0.017453292519943295; // Math.PI / 180\n  const c = Math.cos;\n  const a =\n    0.5 -\n    c((lat2 - lat1) * p) / 2 +\n    (c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p))) / 2;\n\n  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\n};\n\nexport const slope = (from: GPXPoint, to: GPXPoint) => {\n  const dist = Math.abs(distance(from, to));\n  if (to.elevation === null || from.elevation === null) return null;\n  const elevationDiffKm = (to.elevation - from.elevation) / 1000;\n  return Math.atan(elevationDiffKm / dist);\n};\n\nexport const parseGPXFile = async (blob: Blob) => {\n  const text = await blob.text();\n  const parser = new XMLParser({\n    ignoreAttributes: false,\n  });\n  const content = parser.parse(text, true) as RawGPXFile;\n  if (!content?.gpx?.trk?.trkseg?.trkpt?.length) {\n    throw new Error(\"Invalid or empty GPX file\");\n  }\n\n  return gpxToPath(content);\n};\n\nexport const DEFAULT_GPX_STATISTICS: GPXStatistics = {\n  minElevation: null,\n  maxElevation: null,\n  lengthKm: 0,\n  elevationGain: 0,\n  elevationLoss: 0,\n};\n\nexport const computeGpxStatistics = (gpx: GPX): GPXStatistics => {\n  const statistics: GPXStatistics = { ...DEFAULT_GPX_STATISTICS };\n\n  gpx.points.forEach((point, i, points) => {\n    const currentElevation = point.elevation;\n    const nextPoint = points[i + 1];\n    if (currentElevation !== null) {\n      if (\n        statistics.minElevation === null ||\n        currentElevation < statistics.minElevation\n      ) {\n        statistics.minElevation = currentElevation;\n      }\n\n      if (\n        statistics.maxElevation === null ||\n        currentElevation > statistics.maxElevation\n      ) {\n        statistics.maxElevation = currentElevation;\n      }\n\n      const nextPointElevation = nextPoint?.elevation;\n      if (!Number.isFinite(nextPointElevation)) return;\n      const elevationDifference = nextPointElevation! - currentElevation;\n      if (elevationDifference < 0) {\n        statistics.elevationLoss -= elevationDifference;\n      } else {\n        statistics.elevationGain += elevationDifference;\n      }\n    }\n\n    if (nextPoint) {\n      statistics.lengthKm += distance(point, nextPoint);\n    }\n  });\n  return statistics;\n};\n\nexport const computeGpxViewport = (gpx: GPX): GPXViewport => {\n  const { points } = gpx;\n  if (points.length <= 1) {\n    throw new Error(\"Insufficient points for computing GPX Viewport\");\n  }\n\n  const xs = points.map((p) => p.lat);\n  const ys = points.map((p) => p.lon);\n\n  const centerX = NumberUtils.average(...xs);\n  const centerY = NumberUtils.average(...ys);\n\n  const minX = NumberUtils.min(...xs);\n  const maxX = NumberUtils.max(...xs);\n  const minY = NumberUtils.min(...ys);\n  const maxY = NumberUtils.max(...ys);\n  return {\n    center: [centerX, centerY],\n    bounds: [\n      [minX, minY],\n      [maxX, maxY],\n    ],\n  };\n};\n\nexport const computeAccumulativeDistance = (gpx: GPX): number[] => {\n  if (gpx.points.length === 0) return [];\n\n  const accumulatedDistances = [0];\n  let totalDistance = 0;\n  for (const i in gpx.points) {\n    const point = gpx.points[i];\n    const nextPoint = gpx.points[+i + 1];\n    if (!nextPoint) break;\n    totalDistance += distance(point, nextPoint);\n    accumulatedDistances.push(totalDistance);\n  }\n  return accumulatedDistances;\n}\n\nexport const computeSVGPathForGPX = (gpx: GPX) => {\n  if (gpx.points.length <= 1) return \"\";\n  const normalizedRange = { min: 0, max: 100 };\n  const [xs, ys] = [\n    NumberUtils.normalize(normalizedRange, ...gpx.points.map((p) => p.lat)),\n    NumberUtils.normalize(normalizedRange, ...gpx.points.map((p) => p.lon)),\n  ];\n\n  const int = (n: number) => Math.round(n);\n  const command = (cmd: \"M\" | \"L\", point: [number, number]) =>\n    ` ${cmd} ${int(point[0])} ${int(point[1])}`;\n\n  let path = command(\"M\", [xs[0], ys[0]]);\n\n  ArrayUtils.zip(xs, ys)\n    .slice(1)\n    .forEach((point, i) => {\n      path += command(\"L\", point);\n    });\n\n  return path;\n};\n","import { GPXPoint, slope } from \".\";\nimport NumberUtils from \"../../utils/Number\";\n\ntype RGB = [number, number, number];\n\nconst SLOPE_COLOR_CONFIG = {\n  min: {\n    value: NumberUtils.degToRad(-70),\n    color: [0, 255, 0],\n  },\n  max: {\n    value: NumberUtils.degToRad(50),\n    color: [255, 0, 0],\n  },\n};\nexport const getColorBySegment = (from: GPXPoint, to: GPXPoint): RGB => {\n  const segmentSlope = slope(from, to);\n  if (segmentSlope === null) {\n    return [0, 0, 0];\n  }\n  const ratio = NumberUtils.ratioIn(\n    SLOPE_COLOR_CONFIG.min.value,\n    segmentSlope,\n    SLOPE_COLOR_CONFIG.max.value\n  );\n  const clippedRatio = NumberUtils.clip(0, ratio, 1);\n  const colorInterpolated = NumberUtils.interpolateVector(\n    SLOPE_COLOR_CONFIG.min.color,\n    SLOPE_COLOR_CONFIG.max.color,\n    clippedRatio\n  ) as RGB;\n  return colorInterpolated;\n};\n\nexport const rgbVecToString = (rgb: RGB): string => {\n  return `rgb(${rgb[0]},${rgb[1]},${rgb[2]})`;\n};\n","import React, { useMemo } from \"react\";\nimport { LatLng } from \"leaflet\";\nimport { Polyline, useMapEvent } from \"react-leaflet\";\nimport { GPX, GPXPoint } from \"../../../domain/GPX\";\nimport { getColorBySegment, rgbVecToString } from \"../../../domain/GPX/colors\";\n\ntype Props = {\n  gpx: GPX;\n  onInspectPointIndex: (index: number) => void;\n};\n\nconst getClosestPointTo = (latlng: LatLng, positions: GPXPoint[], thresholdMeter = 50) => {\n  let minDist = Infinity;\n  let index = -1;\n  for (let i = 0; i < positions.length; i++) {\n    const position = positions[i];\n    const dist = latlng.distanceTo([position.lat, position.lon]);\n    if (dist < minDist) {\n      index = i;\n      minDist = dist;\n    }\n  }\n  if (minDist > thresholdMeter) return null;\n  return index;\n}\nexport default function GPXMapLine({ gpx, onInspectPointIndex }: Props) {\n  const positions = useMemo(() => gpx.points, [gpx]);\n  useMapEvent('click', (event) => {\n    const clickedAt = event.latlng;\n    const closestPositionIndex = getClosestPointTo(clickedAt, positions);\n    if (closestPositionIndex !== null) {\n      onInspectPointIndex(closestPositionIndex);\n    }\n  });\n\n  return (\n    <>\n      {positions.map((position, i) =>\n        i === positions.length - 1 ? null : (\n          <Polyline\n            key={`${i}-${position.lat}-${position.lon}-${position.lat}-${position.lon}`}\n            color={rgbVecToString(\n              getColorBySegment(position, positions[i + 1])\n            )}\n            positions={[\n              [position.lat, position.lon],\n              [positions[i + 1].lat, positions[i + 1].lon],\n            ]}\n          />\n        )\n      )}\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { Circle, Polyline } from \"react-leaflet\";\nimport NumberUtils from \"../../../utils/Number\";\n\nconst LINE_HEADING_LENGTH = 10;\nconst LINE_HEADING_HALF_ANGLE = 30;\ntype Coordinates = [number, number];\n\nconst computeLineHeadingCoordinates = (\n  position: GeolocationPosition\n): [[Coordinates, Coordinates], [Coordinates, Coordinates]] | null => {\n  const { heading, latitude, longitude } = position.coords;\n  if (heading === null) return null;\n  const leftLineHeading = NumberUtils.degToRad(\n    NumberUtils.normalizeDegree(heading - LINE_HEADING_HALF_ANGLE)\n  );\n  const rightLineHeading = NumberUtils.degToRad(\n    NumberUtils.normalizeDegree(heading + LINE_HEADING_HALF_ANGLE)\n  );\n  const leftLineLat =\n    latitude + LINE_HEADING_LENGTH * Math.sin(leftLineHeading);\n  const leftLineLng =\n    longitude + LINE_HEADING_LENGTH * Math.cos(leftLineHeading);\n\n  const rightLineLat =\n    latitude + LINE_HEADING_LENGTH * Math.sin(rightLineHeading);\n  const rightLineLng =\n    longitude + LINE_HEADING_LENGTH * Math.cos(rightLineHeading);\n\n  return [\n    [\n      [latitude, longitude],\n      [leftLineLat, leftLineLng],\n    ],\n    [\n      [latitude, longitude],\n      [rightLineLat, rightLineLng],\n    ],\n  ];\n};\n\nexport default function GPXMapUserLocationPin() {\n  const [userLocation, setUserLocation] = useState<GeolocationPosition | null>(\n    null\n  );\n\n  useEffect(() => {\n    const locationWatcher = window.navigator.geolocation.watchPosition(\n      setUserLocation,\n      () => toast.error(\"Unable to get your location\")\n    );\n    return () => window.navigator.geolocation.clearWatch(locationWatcher);\n  }, []);\n  if (!userLocation) return null;\n\n  const inverseAccuracyRatio = (100 - userLocation.coords.accuracy) / 100;\n  const [circleRadius] = NumberUtils.interpolateVector(\n    [40],\n    [500],\n    inverseAccuracyRatio\n  );\n\n  const lineHeadingCoords = computeLineHeadingCoordinates(userLocation);\n  return (\n    <>\n      {lineHeadingCoords && (\n        <>\n          <Polyline positions={lineHeadingCoords[0]} color=\"blue\" />\n          <Polyline positions={lineHeadingCoords[1]} color=\"blue\" />\n        </>\n      )}\n      <Circle\n        center={[userLocation.coords.latitude, userLocation.coords.longitude]}\n        radius={circleRadius}\n      />\n    </>\n  );\n}\n","import React from \"react\";\nimport { Circle, MapContainer, TileLayer } from \"react-leaflet\";\n\nimport { GPX, computeGpxViewport } from \"../../../domain/GPX\";\nimport GPXMapLine from \"./GPXMapLine\";\nimport GPXMapUserLocationPin from \"./GPXMapUserLocationPin\";\n\ntype Props = {\n  className?: string;\n  gpx: GPX;\n  inspectingPointIndex: number;\n  onInspectPointIndex: (index: number) => void;\n\n};\nexport default function GPXMapView({\n  className,\n  gpx,\n  inspectingPointIndex,\n  onInspectPointIndex,\n}: Props) {\n  const viewport = computeGpxViewport(gpx);\n  const inspectingPoint = gpx.points[inspectingPointIndex ?? -1] ?? null;\n  return (\n    <MapContainer\n      zoomControl={false}\n      center={viewport.center}\n      zoom={12}\n      className={className}\n      style={{ height: \"35vh\" }}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <GPXMapLine\n        gpx={gpx}\n        onInspectPointIndex={onInspectPointIndex}\n      />\n      <GPXMapUserLocationPin />\n      {inspectingPoint && (\n        <Circle\n          center={[inspectingPoint.lat, inspectingPoint.lon]}\n          pathOptions={{ color: 'orange', fillColor: 'orange' }}\n          radius={60}\n        />\n      )}\n    </MapContainer>\n  );\n}\n","import { useMemo } from 'react';\nimport NumberUtils from '../../../../utils/Number';\n\nconst BASE_OPTION = {\n  responsive: true,\n  animation: { duration: 0 },\n   plugins: {\n    tooltip: { enabled: false }, legend: { display: false },\n    annotation: {\n      annotations: {} as Record<string, any>\n    }\n  },\n};\ntype CreateAnnotationsOption = {\n  index: number;\n  color: string;\n  yMax: number;\n  yMin: number;\n  name: string;\n  yValues: number[];\n}\nconst createAnnotationsAtIndex = ({\n  yValues,\n  index,\n  color,\n  yMax,\n  yMin,\n  name,\n}: CreateAnnotationsOption) => ({\n  [`${name}-line-horizontal`]: {\n    type: \"line\",\n    borderColor: color,\n    borderWidth: 2,\n    xMax: yValues.length - 1,\n    xMin: 0,\n    xScaleID: \"x\",\n    yMax: yValues[index],\n    yMin: yValues[index],\n    yScaleID: \"y\",\n  },\n  [`${name}-line`]: {\n    type: \"line\",\n    borderColor: color,\n    borderWidth: 2,\n    xMax: index,\n    xMin: index,\n    xScaleID: \"x\",\n    yMax,\n    yMin,\n    yScaleID: \"y\",\n  },\n  [`${name}-point`]: {\n    type: \"point\",\n    backgroundColor: color,\n    radius: 3,\n    borderWidth: 0,\n    xValue: index,\n    xScaleID: \"x\",\n    yValue: yValues[index],\n    yScaleID: \"y\",\n  }\n});\n\ntype UseElevationChartOptionProps = {\n  inspectPointIndex: number;\n  elevations: (number | null)[];\n}\nconst Y_AXIS_MARGIN = 100;\nexport default function useElevationChartOption({\n  elevations,\n  inspectPointIndex,\n}: UseElevationChartOptionProps) {\n  const yMax = useMemo(() => NumberUtils.max(...elevations) + Y_AXIS_MARGIN, [elevations]);\n  const yMin = useMemo(() => NumberUtils.min(...elevations) - Y_AXIS_MARGIN, [elevations]);\n  const finalOption = {\n    ...BASE_OPTION,\n    scales: {\n      y: {\n        min: yMin,\n        max: yMax,\n      },\n    },\n  };\n\n  if (inspectPointIndex >= 0) {\n    finalOption.plugins.annotation.annotations = {\n      ...finalOption.plugins.annotation.annotations,\n      ...createAnnotationsAtIndex({\n        index: inspectPointIndex,\n        yValues: elevations as number[],\n        yMax,\n        yMin,\n        name: \"inspect\",\n        color: \"orange\",\n      }),\n    };\n  }\n  return finalOption;\n}","import React, { useMemo, useRef } from \"react\";\nimport { Chart as ChartJS } from \"chart.js\";\nimport { Chart, getElementAtEvent } from \"react-chartjs-2\";\nimport { GPX, computeAccumulativeDistance } from \"../../../../domain/GPX\";\nimport { MarcoNutritionColor } from \"../../../../types/Nutrition\";\nimport useElevationChartOption from \"./useElevationChartOption\";\n\ntype Props = {\n  gpx: GPX;\n  inspectPointAtIndex: number;\n  onInspectPointAtIndex: (index: number) => void;\n};\nexport default function GPXElevationChart({\n  gpx,\n  inspectPointAtIndex,\n  onInspectPointAtIndex,\n}: Props) {\n  const chartRef = useRef<ChartJS>(null!);\n  const elevations = useMemo(() => gpx.points.map((p) => p.elevation), [gpx]);\n  const accumulatedDistances = useMemo(\n    () =>\n      computeAccumulativeDistance(gpx).map(\n        (cumsum) => `${cumsum.toFixed(1)} km`\n      ),\n    [gpx]\n  );\n  const options = useElevationChartOption({\n    elevations,\n    inspectPointIndex: inspectPointAtIndex,\n  });\n  if (elevations.length === 0) return null;\n  const lineData = {\n    labels: accumulatedDistances,\n    datasets: [\n      {\n        label: \"Elevation\",\n        data: elevations,\n        pointRadius: 1,\n        lineTension: 0.8,\n        borderColor: MarcoNutritionColor.fat,\n      }\n    ]\n  };\n\n  const onChartClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const chart = chartRef.current;\n    if (!chart) return;\n    const element = getElementAtEvent(chart, e);\n    if (element[0]?.index !== undefined) {\n      onInspectPointAtIndex(element[0]?.index ?? -1);\n    }\n  };\n\n  return (\n    <Chart\n      ref={chartRef}\n      type=\"line\"\n      onClick={onChartClick}\n      height={96}\n      data={lineData}\n      options={options}\n    />\n  );\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { GPX, computeGpxStatistics } from '../../../domain/GPX';\nimport ScalarWidget from '../../Widgets/ScalarWidget';\n\ntype Props = {\n  gpx: GPX;\n  className?: string;\n}\nexport default function GPXStatistics({ className, gpx}: Props) {\n  const statistics = computeGpxStatistics(gpx);\n  return (\n    <div className={classNames(\"grid grid-cols-2 gap-2\", className)}>\n      <ScalarWidget label=\"Distance\" value={statistics.lengthKm} unit=\"km\" />\n      <ScalarWidget label=\"Highest point\" value={statistics.maxElevation} unit=\"hm\" />\n      <ScalarWidget label=\"Elevation Gain\" value={statistics.elevationGain} unit=\"hm\" className=\"col-start-1\" />\n      <ScalarWidget label=\"Elevation Loss\" value={statistics.elevationLoss} unit=\"hm\" />\n    </div>\n  )\n}","import React, { useState } from \"react\";\nimport Modal from \"../../Modal\";\nimport { GPX } from \"../../../domain/GPX\";\nimport GPXMapView from \"./GPXMapView\";\nimport GPXElevationChart from \"./GPXElevationChart\";\nimport GPXStatistics from \"./GPXStatistics\";\n\ntype Props = {\n  opened: boolean;\n  onClose: () => void;\n  gpx: GPX;\n};\nexport default function GPXDetailViewModal({\n  opened,\n  onClose,\n  gpx,\n}: Props) {\n  const [inspectingPointIndex, setInspectingPointIndex] = useState<number>(-1);\n  return (\n    <Modal opened={opened} onClose={onClose} label=\"GPX Details\">\n      <GPXMapView\n        inspectingPointIndex={inspectingPointIndex}\n        onInspectPointIndex={setInspectingPointIndex}\n        gpx={gpx}\n        className=\"rounded-lg w-full\"\n      />\n      <GPXElevationChart\n        inspectPointAtIndex={inspectingPointIndex}\n        onInspectPointAtIndex={setInspectingPointIndex}\n        gpx={gpx}\n      />\n      <GPXStatistics gpx={gpx} className=\"w-full\" />\n    </Modal>\n  );\n}\n","import React, { useMemo, useState } from \"react\";\nimport { GPX, computeSVGPathForGPX } from \"../../domain/GPX\";\nimport GPXDetailViewModal from \"./GPXDetailViewModal\";\n\ntype Props = {\n  gpx: GPX;\n  className?: string;\n};\n\nexport default function GPXPathViewer({ gpx, className }: Props) {\n  const [zoomed, setZoomed] = useState(false);\n  const svgPath = useMemo(() => {\n    return computeSVGPathForGPX(gpx);\n  }, [gpx]);\n\n  const toggleZoom = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setZoomed(!zoomed);\n  };\n  return (\n    <>\n      <div onClick={(e) => e.stopPropagation()}>\n        <GPXDetailViewModal\n          gpx={gpx}\n          opened={zoomed}\n          onClose={() => setZoomed(false)}\n        />\n      </div>\n      <div onClick={toggleZoom} className=\"relative\">\n        <svg\n          viewBox=\"-10 -10 120 120\"\n          width=\"100%\"\n          height=\"100%\"\n          className={className}\n          style={{ transform: \"rotate(-80deg)\" }}\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            fill=\"none\"\n            style={{ strokeLinejoin: \"round\" }}\n            stroke=\"black\"\n            strokeWidth={1}\n            d={svgPath}\n          />\n        </svg>\n      </div>\n    </>\n  );\n}\n","import React, { ChangeEventHandler, useRef } from \"react\";\nimport classNames from \"classnames\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { GPX } from \"../../../domain/GPX\";\nimport GPXPathViewer from \"../../GPXPathViewer\";\nimport Button, { ButtonStyle } from \"../Button\";\n\ntype Props = {\n  gpx?: GPX;\n  onSelectGpx: (file?: Blob) => void;\n  className?: string;\n};\nexport default function GPXInput({ gpx, className, onSelectGpx }: Props) {\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const chooseFile = () => {\n    inputRef.current?.click();\n  };\n\n  const onFileChosen: ChangeEventHandler<HTMLInputElement> = async (e) => {\n    const fileSelected = e.target.files?.[0];\n    if (!fileSelected) return;\n    onSelectGpx(fileSelected);\n  };\n\n  const onClear = () => onSelectGpx(undefined);\n\n  return (\n    <div\n      onClick={chooseFile}\n      className={classNames(\n        \"relative cursor-pointer rounded-lg p-2 flex items-center bg-gray-300 gap-2\",\n        className\n      )}\n    >\n      <input\n        className=\"hidden\"\n        type=\"file\"\n        ref={inputRef}\n        accept=\".gpx\"\n        onInput={onFileChosen}\n      />\n      <div className=\"rounded-lg w-16 h-16 flex items-center justify-center\">\n        {gpx ? (\n          <GPXPathViewer gpx={gpx} />\n        ) : (\n          <FontAwesomeIcon icon=\"map\" className=\"child:fill-gray-100 w-4 h-4\" />\n        )}\n      </div>\n      {!!gpx && (\n        <div className=\"absolute -right-2 -bottom-2\" onClick={e => e.stopPropagation()}>\n          <Button className=\"w-4 h-4\" icon=\"trash\" textClassName=\"w-2 h-2\" buttonStyle={ButtonStyle.BlockDanger} onClick={onClear} />\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { CardioExercise, CardioExerciseType } from \"../../types/CardioExercise\";\nimport GPXInput from \"../Input/GPXInput\";\nimport { GPX, parseGPXFile } from \"../../domain/GPX\";\nimport toast from \"react-hot-toast\";\n\nconst EXERCISE_WITH_GPX_FIELDS: CardioExerciseType[] = [\n  CardioExerciseType.Hiking,\n  CardioExerciseType.Running,\n];\ntype CardioExerciseWithGpx = Extract<CardioExercise, { gpx?: Blob }>;\ntype Props = {\n  record: CardioExercise;\n  className?: string;\n  onChange: (record: CardioExercise) => void;\n};\n\nexport default function GPXFilePicker({ record, className, onChange }: Props) {\n  const [gpx, setGpx] = useState<GPX | null>(null);\n  const hasGpxFieldInRecord = EXERCISE_WITH_GPX_FIELDS.includes(record.type);\n\n  useEffect(() => {\n    const gpxFile = (record as CardioExerciseWithGpx).gpx;\n    if (!gpxFile) {\n      setGpx(null);\n      return;\n    }\n    parseGPXFile(gpxFile)\n      .then(setGpx)\n      .catch(() => {\n        toast.error(\"Failed to parse GPX File\");\n      });\n  }, [record]);\n\n  if (!hasGpxFieldInRecord) return null;\n\n  const onSelectGpx = (gpx?: Blob) => {\n    onChange({ ...record, gpx } as CardioExerciseWithGpx);\n  };\n\n  return (\n    <GPXInput\n      gpx={gpx ?? undefined}\n      className={className}\n      onSelectGpx={onSelectGpx}\n    />\n  );\n}\n"],"names":["distance","from","to","lat1","lat","lon1","lon","lat2","lon2","p","c","Math","cos","a","asin","sqrt","parseGPXFile","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","blob","_content$gpx","_content$gpx$trk","_content$gpx$trk$trks","_content$gpx$trk$trks2","text","parser","content","wrap","_context","prev","next","sent","XMLParser","ignoreAttributes","parse","gpx","trk","trkseg","trkpt","length","Error","abrupt","name","rawGpx","points","map","point","_point$ele","parseFloat","toString","elevation","ele","stop","_x","apply","arguments","DEFAULT_GPX_STATISTICS","minElevation","maxElevation","lengthKm","elevationGain","elevationLoss","computeGpxStatistics","statistics","_objectSpread","forEach","i","currentElevation","nextPoint","nextPointElevation","Number","isFinite","elevationDifference","computeGpxViewport","xs","ys","centerX","NumberUtils","average","_toConsumableArray","centerY","minX","min","maxX","max","center","bounds","computeAccumulativeDistance","accumulatedDistances","totalDistance","push","computeSVGPathForGPX","normalizedRange","_ref2","normalize","concat","int","n","round","command","cmd","path","ArrayUtils","zip","slice","SLOPE_COLOR_CONFIG","value","degToRad","color","getColorBySegment","segmentSlope","dist","abs","elevationDiffKm","atan","slope","ratio","ratioIn","clippedRatio","clip","interpolateVector","rgbVecToString","rgb","getClosestPointTo","latlng","positions","thresholdMeter","undefined","minDist","Infinity","index","position","distanceTo","GPXMapLine","onInspectPointIndex","useMemo","useMapEvent","event","clickedAt","closestPositionIndex","_jsx","_Fragment","children","Polyline","computeLineHeadingCoordinates","_position$coords","coords","heading","latitude","longitude","leftLineHeading","normalizeDegree","rightLineHeading","sin","GPXMapUserLocationPin","_useState","useState","_useState2","_slicedToArray","userLocation","setUserLocation","useEffect","locationWatcher","window","navigator","geolocation","watchPosition","toast","error","clearWatch","inverseAccuracyRatio","accuracy","_NumberUtils$interpol","circleRadius","lineHeadingCoords","_jsxs","Circle","radius","GPXMapView","_gpx$points","className","inspectingPointIndex","viewport","inspectingPoint","MapContainer","zoomControl","zoom","style","height","TileLayer","attribution","url","pathOptions","fillColor","BASE_OPTION","responsive","animation","duration","plugins","tooltip","enabled","legend","display","annotation","annotations","createAnnotationsAtIndex","yValues","yMax","yMin","_defineProperty","type","borderColor","borderWidth","xMax","xMin","xScaleID","yScaleID","backgroundColor","xValue","yValue","Y_AXIS_MARGIN","GPXElevationChart","inspectPointAtIndex","onInspectPointAtIndex","chartRef","useRef","elevations","cumsum","toFixed","options","_ref3","inspectPointIndex","finalOption","scales","y","useElevationChartOption","lineData","labels","datasets","label","data","pointRadius","lineTension","MarcoNutritionColor","fat","Chart","ref","onClick","e","_element$","chart","current","_element$0$index","_element$2","element","getElementAtEvent","GPXStatistics","classNames","ScalarWidget","unit","GPXDetailViewModal","opened","onClose","setInspectingPointIndex","Modal","GPXPathViewer","zoomed","setZoomed","svgPath","stopPropagation","viewBox","width","transform","xmlns","fill","strokeLinejoin","stroke","strokeWidth","d","GPXInput","onSelectGpx","inputRef","onFileChosen","_e$target$files","fileSelected","target","files","_inputRef$current","click","accept","onInput","FontAwesomeIcon","icon","Button","textClassName","buttonStyle","ButtonStyle","BlockDanger","EXERCISE_WITH_GPX_FIELDS","CardioExerciseType","Hiking","Running","GPXFilePicker","record","onChange","setGpx","hasGpxFieldInRecord","includes","gpxFile","then","catch"],"sourceRoot":""}