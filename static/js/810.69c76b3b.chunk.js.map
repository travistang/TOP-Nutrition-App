{"version":3,"file":"static/js/810.69c76b3b.chunk.js","mappings":"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","sources":["domain/GPX/index.ts","domain/GPX/colors.ts","components/GPXPathViewer/GPXDetailViewModal/GPXMapLine.tsx","components/GPXPathViewer/GPXDetailViewModal/GPXMapUserLocationPin.tsx","components/GPXPathViewer/GPXDetailViewModal/GPXMapView.tsx","components/GPXPathViewer/GPXDetailViewModal/GPXElevationChart/useElevationChartOption.ts","components/GPXPathViewer/GPXDetailViewModal/GPXElevationChart/index.tsx","components/GPXPathViewer/GPXDetailViewModal/GPXStatistics.tsx","components/GPXPathViewer/GPXDetailViewModal/index.tsx","components/GPXPathViewer/index.tsx","components/Input/GPXInput/index.tsx","components/CreateCardioExerciseRecordModal/GPXFilePicker.tsx"],"sourcesContent":["import { XMLParser } from \"fast-xml-parser\";\nimport NumberUtils from \"../../utils/Number\";\nimport ArrayUtils from \"../../utils/Array\";\n\nexport type RawGPXTrackPoint = {\n  \"@_lat\": number;\n  \"@_lon\": number;\n  ele?: number;\n};\n\nexport type RawGPXFile = {\n  gpx: {\n    trk: {\n      name: string;\n      trkseg: {\n        trkpt: RawGPXTrackPoint[];\n      };\n    };\n  };\n};\n\nexport type GPXPoint = {\n  lat: number;\n  lon: number;\n  elevation: number | null;\n};\n\nexport type GPX = {\n  name: string;\n  points: GPXPoint[];\n};\nexport type GPXStatistics = {\n  minElevation: number | null;\n  maxElevation: number | null;\n  lengthKm: number;\n  elevationGain: number;\n  elevationLoss: number;\n};\n\nexport type GPXViewport = {\n  center: [number, number];\n  bounds: [[number, number], [number, number]];\n};\n\nexport const gpxToPath = (rawGpx: RawGPXFile): GPX => {\n  return {\n    name: rawGpx.gpx.trk.name,\n    points: rawGpx.gpx.trk.trkseg.trkpt.map((point) => ({\n      lat: parseFloat(point[\"@_lat\"].toString()),\n      lon: parseFloat(point[\"@_lon\"].toString()),\n      elevation: point.ele ?? null,\n    })),\n  };\n};\n\nconst distance = (from: GPXPoint, to: GPXPoint) => {\n  const { lat: lat1, lon: lon1 } = from;\n  const { lat: lat2, lon: lon2 } = to;\n\n  // https://stackoverflow.com/a/21623206\n  const p = 0.017453292519943295; // Math.PI / 180\n  const c = Math.cos;\n  const a =\n    0.5 -\n    c((lat2 - lat1) * p) / 2 +\n    (c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p))) / 2;\n\n  return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\n};\n\nexport const slope = (from: GPXPoint, to: GPXPoint) => {\n  const dist = Math.abs(distance(from, to));\n  if (to.elevation === null || from.elevation === null) return null;\n  const elevationDiffKm = (to.elevation - from.elevation) / 1000;\n  return Math.atan(elevationDiffKm / dist);\n};\n\nexport const parseGPXFile = async (blob: Blob) => {\n  const text = await blob.text();\n  const parser = new XMLParser({\n    ignoreAttributes: false,\n  });\n  const content = parser.parse(text, true) as RawGPXFile;\n  if (!content?.gpx?.trk?.trkseg?.trkpt?.length) {\n    throw new Error(\"Invalid or empty GPX file\");\n  }\n\n  return gpxToPath(content);\n};\n\nexport const DEFAULT_GPX_STATISTICS: GPXStatistics = {\n  minElevation: null,\n  maxElevation: null,\n  lengthKm: 0,\n  elevationGain: 0,\n  elevationLoss: 0,\n};\n\nexport const computeGpxStatistics = (gpx: GPX): GPXStatistics => {\n  const statistics: GPXStatistics = { ...DEFAULT_GPX_STATISTICS };\n\n  gpx.points.forEach((point, i, points) => {\n    const currentElevation = point.elevation;\n    const nextPoint = points[i + 1];\n    if (currentElevation !== null) {\n      if (\n        statistics.minElevation === null ||\n        currentElevation < statistics.minElevation\n      ) {\n        statistics.minElevation = currentElevation;\n      }\n\n      if (\n        statistics.maxElevation === null ||\n        currentElevation > statistics.maxElevation\n      ) {\n        statistics.maxElevation = currentElevation;\n      }\n\n      const nextPointElevation = nextPoint?.elevation;\n      if (!Number.isFinite(nextPointElevation)) return;\n      const elevationDifference = nextPointElevation! - currentElevation;\n      if (elevationDifference < 0) {\n        statistics.elevationLoss -= elevationDifference;\n      } else {\n        statistics.elevationGain += elevationDifference;\n      }\n    }\n\n    if (nextPoint) {\n      statistics.lengthKm += distance(point, nextPoint);\n    }\n  });\n  return statistics;\n};\n\nexport const computeGpxViewport = (gpx: GPX): GPXViewport => {\n  const { points } = gpx;\n  if (points.length <= 1) {\n    throw new Error(\"Insufficient points for computing GPX Viewport\");\n  }\n\n  const xs = points.map((p) => p.lat);\n  const ys = points.map((p) => p.lon);\n\n  const centerX = NumberUtils.average(...xs);\n  const centerY = NumberUtils.average(...ys);\n\n  const minX = NumberUtils.min(...xs);\n  const maxX = NumberUtils.max(...xs);\n  const minY = NumberUtils.min(...ys);\n  const maxY = NumberUtils.max(...ys);\n  return {\n    center: [centerX, centerY],\n    bounds: [\n      [minX, minY],\n      [maxX, maxY],\n    ],\n  };\n};\n\nexport const computeAccumulativeDistance = (gpx: GPX): number[] => {\n  if (gpx.points.length === 0) return [];\n\n  const accumulatedDistances = [0];\n  let totalDistance = 0;\n  for (const i in gpx.points) {\n    const point = gpx.points[i];\n    const nextPoint = gpx.points[+i + 1];\n    if (!nextPoint) break;\n    totalDistance += distance(point, nextPoint);\n    accumulatedDistances.push(totalDistance);\n  }\n  return accumulatedDistances;\n}\n\nexport const computeSVGPathForGPX = (gpx: GPX) => {\n  if (gpx.points.length <= 1) return \"\";\n  const normalizedRange = { min: 0, max: 100 };\n  const [xs, ys] = [\n    NumberUtils.normalize(normalizedRange, ...gpx.points.map((p) => p.lat)),\n    NumberUtils.normalize(normalizedRange, ...gpx.points.map((p) => p.lon)),\n  ];\n\n  const int = (n: number) => Math.round(n);\n  const command = (cmd: \"M\" | \"L\", point: [number, number]) =>\n    ` ${cmd} ${int(point[0])} ${int(point[1])}`;\n\n  let path = command(\"M\", [xs[0], ys[0]]);\n\n  ArrayUtils.zip(xs, ys)\n    .slice(1)\n    .forEach((point, i) => {\n      path += command(\"L\", point);\n    });\n\n  return path;\n};\n","import { GPXPoint, slope } from \".\";\nimport NumberUtils from \"../../utils/Number\";\n\ntype RGB = [number, number, number];\n\nconst SLOPE_COLOR_CONFIG = {\n  min: {\n    value: NumberUtils.degToRad(-70),\n    color: [0, 255, 0],\n  },\n  max: {\n    value: NumberUtils.degToRad(50),\n    color: [255, 0, 0],\n  },\n};\nexport const getColorBySegment = (from: GPXPoint, to: GPXPoint): RGB => {\n  const segmentSlope = slope(from, to);\n  if (segmentSlope === null) {\n    return [0, 0, 0];\n  }\n  const ratio = NumberUtils.ratioIn(\n    SLOPE_COLOR_CONFIG.min.value,\n    segmentSlope,\n    SLOPE_COLOR_CONFIG.max.value\n  );\n  const clippedRatio = NumberUtils.clip(0, ratio, 1);\n  const colorInterpolated = NumberUtils.interpolateVector(\n    SLOPE_COLOR_CONFIG.min.color,\n    SLOPE_COLOR_CONFIG.max.color,\n    clippedRatio\n  ) as RGB;\n  return colorInterpolated;\n};\n\nexport const rgbVecToString = (rgb: RGB): string => {\n  return `rgb(${rgb[0]},${rgb[1]},${rgb[2]})`;\n};\n","import React, { useMemo } from \"react\";\nimport { Polyline } from \"react-leaflet\";\nimport { GPX } from \"../../../domain/GPX\";\nimport { getColorBySegment, rgbVecToString } from \"../../../domain/GPX/colors\";\n\ntype Props = {\n  gpx: GPX;\n};\n\nexport default function GPXMapLine({ gpx }: Props) {\n  const positions = useMemo(() => gpx.points, [gpx]);\n\n  return (\n    <>\n      {positions.map((position, i) =>\n        i === positions.length - 1 ? null : (\n          <Polyline\n            key={`${i}-${position.lat}-${position.lon}-${position.lat}-${position.lon}`}\n            color={rgbVecToString(\n              getColorBySegment(position, positions[i + 1])\n            )}\n            positions={[\n              [position.lat, position.lon],\n              [positions[i + 1].lat, positions[i + 1].lon],\n            ]}\n          />\n        )\n      )}\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { Circle, Polyline } from \"react-leaflet\";\nimport NumberUtils from \"../../../utils/Number\";\n\nconst LINE_HEADING_LENGTH = 10;\nconst LINE_HEADING_HALF_ANGLE = 30;\ntype Coordinates = [number, number];\n\nconst computeLineHeadingCoordinates = (\n  position: GeolocationPosition\n): [[Coordinates, Coordinates], [Coordinates, Coordinates]] | null => {\n  const { heading, latitude, longitude } = position.coords;\n  if (heading === null) return null;\n  const leftLineHeading = NumberUtils.degToRad(\n    NumberUtils.normalizeDegree(heading - LINE_HEADING_HALF_ANGLE)\n  );\n  const rightLineHeading = NumberUtils.degToRad(\n    NumberUtils.normalizeDegree(heading + LINE_HEADING_HALF_ANGLE)\n  );\n  const leftLineLat =\n    latitude + LINE_HEADING_LENGTH * Math.sin(leftLineHeading);\n  const leftLineLng =\n    longitude + LINE_HEADING_LENGTH * Math.cos(leftLineHeading);\n\n  const rightLineLat =\n    latitude + LINE_HEADING_LENGTH * Math.sin(rightLineHeading);\n  const rightLineLng =\n    longitude + LINE_HEADING_LENGTH * Math.cos(rightLineHeading);\n\n  return [\n    [\n      [latitude, longitude],\n      [leftLineLat, leftLineLng],\n    ],\n    [\n      [latitude, longitude],\n      [rightLineLat, rightLineLng],\n    ],\n  ];\n};\n\nexport default function GPXMapUserLocationPin() {\n  const [userLocation, setUserLocation] = useState<GeolocationPosition | null>(\n    null\n  );\n\n  useEffect(() => {\n    const locationWatcher = window.navigator.geolocation.watchPosition(\n      setUserLocation,\n      () => toast.error(\"Unable to get your location\")\n    );\n    return () => window.navigator.geolocation.clearWatch(locationWatcher);\n  }, []);\n  if (!userLocation) return null;\n\n  const inverseAccuracyRatio = (100 - userLocation.coords.accuracy) / 100;\n  const [circleRadius] = NumberUtils.interpolateVector(\n    [40],\n    [500],\n    inverseAccuracyRatio\n  );\n\n  const lineHeadingCoords = computeLineHeadingCoordinates(userLocation);\n  return (\n    <>\n      {lineHeadingCoords && (\n        <>\n          <Polyline positions={lineHeadingCoords[0]} color=\"blue\" />\n          <Polyline positions={lineHeadingCoords[1]} color=\"blue\" />\n        </>\n      )}\n      <Circle\n        center={[userLocation.coords.latitude, userLocation.coords.longitude]}\n        radius={circleRadius}\n      />\n    </>\n  );\n}\n","import React from \"react\";\nimport { Circle, MapContainer, TileLayer } from \"react-leaflet\";\n\nimport { GPX, computeGpxViewport } from \"../../../domain/GPX\";\nimport GPXMapLine from \"./GPXMapLine\";\nimport GPXMapUserLocationPin from \"./GPXMapUserLocationPin\";\n\ntype Props = {\n  className?: string;\n  gpx: GPX;\n  inspectingPointIndex: number;\n};\nexport default function GPXMapView({\n  className,\n  gpx,\n  inspectingPointIndex,\n}: Props) {\n  const viewport = computeGpxViewport(gpx);\n  const inspectingPoint = gpx.points[inspectingPointIndex ?? -1] ?? null;\n  return (\n    <MapContainer\n      zoomControl={false}\n      center={viewport.center}\n      zoom={12}\n      className={className}\n      style={{ height: \"35vh\" }}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <GPXMapLine gpx={gpx} />\n      <GPXMapUserLocationPin />\n      {inspectingPoint && (\n        <Circle\n          center={[inspectingPoint.lat, inspectingPoint.lon]}\n          pathOptions={{ color: 'orange', fillColor: 'orange' }}\n          radius={60}\n        />\n      )}\n    </MapContainer>\n  );\n}\n","import { useMemo } from 'react';\nimport NumberUtils from '../../../../utils/Number';\n\nconst BASE_OPTION = {\n  responsive: true,\n  animation: { duration: 0 },\n   plugins: {\n    tooltip: { enabled: false }, legend: { display: false },\n    annotation: {\n      annotations: {} as Record<string, any>\n    }\n  },\n};\ntype CreateAnnotationsOption = {\n  index: number;\n  color: string;\n  yMax: number;\n  yMin: number;\n  name: string;\n  yValues: number[];\n}\nconst createAnnotationsAtIndex = ({\n  yValues,\n  index,\n  color,\n  yMax,\n  yMin,\n  name,\n}: CreateAnnotationsOption) => ({\n  [`${name}-line-horizontal`]: {\n    type: \"line\",\n    borderColor: color,\n    borderWidth: 2,\n    xMax: yValues.length - 1,\n    xMin: 0,\n    xScaleID: \"x\",\n    yMax: yValues[index],\n    yMin: yValues[index],\n    yScaleID: \"y\",\n  },\n  [`${name}-line`]: {\n    type: \"line\",\n    borderColor: color,\n    borderWidth: 2,\n    xMax: index,\n    xMin: index,\n    xScaleID: \"x\",\n    yMax,\n    yMin,\n    yScaleID: \"y\",\n  },\n  [`${name}-point`]: {\n    type: \"point\",\n    backgroundColor: color,\n    radius: 3,\n    borderWidth: 0,\n    xValue: index,\n    xScaleID: \"x\",\n    yValue: yValues[index],\n    yScaleID: \"y\",\n  }\n});\n\ntype UseElevationChartOptionProps = {\n  inspectPointIndex: number;\n  elevations: (number | null)[];\n}\nconst Y_AXIS_MARGIN = 100;\nexport default function useElevationChartOption({\n  elevations,\n  inspectPointIndex,\n}: UseElevationChartOptionProps) {\n  const yMax = useMemo(() => NumberUtils.max(...elevations) + Y_AXIS_MARGIN, [elevations]);\n  const yMin = useMemo(() => NumberUtils.min(...elevations) - Y_AXIS_MARGIN, [elevations]);\n  const finalOption = {\n    ...BASE_OPTION,\n    scales: {\n      y: {\n        min: yMin,\n        max: yMax,\n      },\n    },\n  };\n\n  if (inspectPointIndex >= 0) {\n    finalOption.plugins.annotation.annotations = {\n      ...finalOption.plugins.annotation.annotations,\n      ...createAnnotationsAtIndex({\n        index: inspectPointIndex,\n        yValues: elevations as number[],\n        yMax,\n        yMin,\n        name: \"inspect\",\n        color: \"orange\",\n      }),\n    };\n  }\n  return finalOption;\n}","import React, { useMemo, useRef } from \"react\";\nimport { Chart as ChartJS } from \"chart.js\";\nimport { Chart, getElementAtEvent } from \"react-chartjs-2\";\nimport { GPX, computeAccumulativeDistance } from \"../../../../domain/GPX\";\nimport { MarcoNutritionColor } from \"../../../../types/Nutrition\";\nimport useElevationChartOption from \"./useElevationChartOption\";\n\ntype Props = {\n  gpx: GPX;\n  inspectPointAtIndex: number;\n  onInspectPointAtIndex: (index: number) => void;\n};\nexport default function GPXElevationChart({\n  gpx,\n  inspectPointAtIndex,\n  onInspectPointAtIndex,\n}: Props) {\n  const chartRef = useRef<ChartJS>(null!);\n  const elevations = useMemo(() => gpx.points.map((p) => p.elevation), [gpx]);\n  const accumulatedDistances = useMemo(\n    () =>\n      computeAccumulativeDistance(gpx).map(\n        (cumsum) => `${cumsum.toFixed(1)} km`\n      ),\n    [gpx]\n  );\n  const options = useElevationChartOption({\n    elevations,\n    inspectPointIndex: inspectPointAtIndex,\n  });\n  if (elevations.length === 0) return null;\n  const lineData = {\n    labels: accumulatedDistances,\n    datasets: [\n      {\n        label: \"Elevation\",\n        data: elevations,\n        pointRadius: 1,\n        lineTension: 0.8,\n        borderColor: MarcoNutritionColor.fat,\n      }\n    ]\n  };\n\n  const onChartClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const chart = chartRef.current;\n    if (!chart) return;\n    const element = getElementAtEvent(chart, e);\n    if (element[0]?.index !== undefined) {\n      onInspectPointAtIndex(element[0]?.index ?? -1);\n    }\n  };\n\n  return (\n    <Chart\n      ref={chartRef}\n      type=\"line\"\n      onClick={onChartClick}\n      height={72}\n      data={lineData}\n      options={options}\n    />\n  );\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { GPX, computeGpxStatistics } from '../../../domain/GPX';\nimport ScalarWidget from '../../Widgets/ScalarWidget';\n\ntype Props = {\n  gpx: GPX;\n  className?: string;\n}\nexport default function GPXStatistics({ className, gpx}: Props) {\n  const statistics = computeGpxStatistics(gpx);\n  return (\n    <div className={classNames(\"grid grid-cols-2 gap-2\", className)}>\n      <ScalarWidget label=\"Distance\" value={statistics.lengthKm} unit=\"km\" />\n      <ScalarWidget label=\"Highest point\" value={statistics.maxElevation} unit=\"hm\" />\n      <ScalarWidget label=\"Elevation Gain\" value={statistics.elevationGain} unit=\"hm\" className=\"col-start-1\" />\n      <ScalarWidget label=\"Elevation Loss\" value={statistics.elevationLoss} unit=\"hm\" />\n    </div>\n  )\n}","import React, { useState } from \"react\";\nimport Modal from \"../../Modal\";\nimport { GPX } from \"../../../domain/GPX\";\nimport GPXMapView from \"./GPXMapView\";\nimport GPXElevationChart from \"./GPXElevationChart\";\nimport GPXStatistics from \"./GPXStatistics\";\n\ntype Props = {\n  opened: boolean;\n  onClose: () => void;\n  gpx: GPX;\n};\nexport default function GPXDetailViewModal({\n  opened,\n  onClose,\n  gpx,\n}: Props) {\n  const [inspectingPointIndex, setInspectingPointIndex] = useState<number>(-1);\n  return (\n    <Modal opened={opened} onClose={onClose} label=\"GPX Details\">\n      <GPXMapView\n        inspectingPointIndex={inspectingPointIndex}\n        gpx={gpx}\n        className=\"rounded-lg w-full\"\n      />\n      <GPXElevationChart\n        inspectPointAtIndex={inspectingPointIndex}\n        onInspectPointAtIndex={setInspectingPointIndex}\n        gpx={gpx}\n      />\n      <GPXStatistics gpx={gpx} className=\"w-full\" />\n    </Modal>\n  );\n}\n","import React, { useMemo, useState } from \"react\";\nimport { GPX, computeSVGPathForGPX } from \"../../domain/GPX\";\nimport GPXDetailViewModal from \"./GPXDetailViewModal\";\n\ntype Props = {\n  gpx: GPX;\n  className?: string;\n};\n\nexport default function GPXPathViewer({ gpx, className }: Props) {\n  const [zoomed, setZoomed] = useState(false);\n  const svgPath = useMemo(() => {\n    return computeSVGPathForGPX(gpx);\n  }, [gpx]);\n\n  const toggleZoom = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setZoomed(!zoomed);\n  };\n  return (\n    <>\n      <div onClick={(e) => e.stopPropagation()}>\n        <GPXDetailViewModal\n          gpx={gpx}\n          opened={zoomed}\n          onClose={() => setZoomed(false)}\n        />\n      </div>\n      <div onClick={toggleZoom} className=\"relative\">\n        <svg\n          viewBox=\"-10 -10 120 120\"\n          width=\"100%\"\n          height=\"100%\"\n          className={className}\n          style={{ transform: \"rotate(-80deg)\" }}\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            fill=\"none\"\n            style={{ strokeLinejoin: \"round\" }}\n            stroke=\"black\"\n            strokeWidth={1}\n            d={svgPath}\n          />\n        </svg>\n      </div>\n    </>\n  );\n}\n","import React, { ChangeEventHandler, useRef } from \"react\";\nimport classNames from \"classnames\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { GPX } from \"../../../domain/GPX\";\nimport GPXPathViewer from \"../../GPXPathViewer\";\nimport Button, { ButtonStyle } from \"../Button\";\n\ntype Props = {\n  gpx?: GPX;\n  onSelectGpx: (file?: Blob) => void;\n  className?: string;\n};\nexport default function GPXInput({ gpx, className, onSelectGpx }: Props) {\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const chooseFile = () => {\n    inputRef.current?.click();\n  };\n\n  const onFileChosen: ChangeEventHandler<HTMLInputElement> = async (e) => {\n    const fileSelected = e.target.files?.[0];\n    if (!fileSelected) return;\n    onSelectGpx(fileSelected);\n  };\n\n  const onClear = () => onSelectGpx(undefined);\n\n  return (\n    <div\n      onClick={chooseFile}\n      className={classNames(\n        \"relative cursor-pointer rounded-lg p-2 flex items-center bg-gray-300 gap-2\",\n        className\n      )}\n    >\n      <input\n        className=\"hidden\"\n        type=\"file\"\n        ref={inputRef}\n        accept=\".gpx\"\n        onInput={onFileChosen}\n      />\n      <div className=\"rounded-lg w-16 h-16 flex items-center justify-center\">\n        {gpx ? (\n          <GPXPathViewer gpx={gpx} />\n        ) : (\n          <FontAwesomeIcon icon=\"map\" className=\"child:fill-gray-100 w-4 h-4\" />\n        )}\n      </div>\n      {!!gpx && (\n        <div className=\"absolute -right-2 -bottom-2\" onClick={e => e.stopPropagation()}>\n          <Button className=\"w-4 h-4\" icon=\"trash\" textClassName=\"w-2 h-2\" buttonStyle={ButtonStyle.BlockDanger} onClick={onClear} />\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { CardioExercise, CardioExerciseType } from \"../../types/CardioExercise\";\nimport GPXInput from \"../Input/GPXInput\";\nimport { GPX, parseGPXFile } from \"../../domain/GPX\";\nimport toast from \"react-hot-toast\";\n\nconst EXERCISE_WITH_GPX_FIELDS: CardioExerciseType[] = [\n  CardioExerciseType.Hiking,\n  CardioExerciseType.Running,\n];\ntype CardioExerciseWithGpx = Extract<CardioExercise, { gpx?: Blob }>;\ntype Props = {\n  record: CardioExercise;\n  className?: string;\n  onChange: (record: CardioExercise) => void;\n};\n\nexport default function GPXFilePicker({ record, className, onChange }: Props) {\n  const [gpx, setGpx] = useState<GPX | null>(null);\n  const hasGpxFieldInRecord = EXERCISE_WITH_GPX_FIELDS.includes(record.type);\n\n  useEffect(() => {\n    const gpxFile = (record as CardioExerciseWithGpx).gpx;\n    if (!gpxFile) {\n      setGpx(null);\n      return;\n    }\n    parseGPXFile(gpxFile)\n      .then(setGpx)\n      .catch(() => {\n        toast.error(\"Failed to parse GPX File\");\n      });\n  }, [record]);\n\n  if (!hasGpxFieldInRecord) return null;\n\n  const onSelectGpx = (gpx?: Blob) => {\n    onChange({ ...record, gpx } as CardioExerciseWithGpx);\n  };\n\n  return (\n    <GPXInput\n      gpx={gpx ?? undefined}\n      className={className}\n      onSelectGpx={onSelectGpx}\n    />\n  );\n}\n"],"names":["distance","from","to","lat1","lat","lon1","lon","lat2","lon2","p","c","Math","cos","a","asin","sqrt","parseGPXFile","blob","text","parser","XMLParser","ignoreAttributes","content","parse","gpx","trk","trkseg","trkpt","length","Error","name","rawGpx","points","map","point","parseFloat","toString","elevation","ele","DEFAULT_GPX_STATISTICS","minElevation","maxElevation","lengthKm","elevationGain","elevationLoss","SLOPE_COLOR_CONFIG","min","value","NumberUtils","color","max","getColorBySegment","segmentSlope","dist","abs","elevationDiffKm","atan","slope","ratio","clippedRatio","GPXMapLine","positions","useMemo","position","i","Polyline","rgb","GPXMapUserLocationPin","useState","userLocation","setUserLocation","useEffect","locationWatcher","window","navigator","geolocation","watchPosition","toast","clearWatch","inverseAccuracyRatio","coords","accuracy","circleRadius","lineHeadingCoords","heading","latitude","longitude","leftLineHeading","rightLineHeading","sin","computeLineHeadingCoordinates","Circle","C","center","radius","GPXMapView","className","inspectingPointIndex","viewport","xs","ys","centerX","centerY","minX","maxX","bounds","computeGpxViewport","inspectingPoint","MapContainer","zoomControl","zoom","style","height","TileLayer","attribution","url","pathOptions","fillColor","BASE_OPTION","responsive","animation","duration","plugins","tooltip","enabled","legend","display","annotation","annotations","useElevationChartOption","elevations","inspectPointIndex","yMax","yMin","finalOption","scales","y","yValues","index","type","borderColor","borderWidth","xMax","xMin","xScaleID","yScaleID","backgroundColor","xValue","yValue","createAnnotationsAtIndex","GPXElevationChart","inspectPointAtIndex","onInspectPointAtIndex","chartRef","useRef","accumulatedDistances","totalDistance","nextPoint","push","computeAccumulativeDistance","cumsum","toFixed","options","lineData","labels","datasets","label","data","pointRadius","lineTension","MarcoNutritionColor","ref","onClick","e","chart","current","element","getElementAtEvent","undefined","GPXStatistics","statistics","forEach","currentElevation","nextPointElevation","Number","isFinite","elevationDifference","computeGpxStatistics","classNames","ScalarWidget","unit","GPXDetailViewModal","opened","onClose","setInspectingPointIndex","Modal","GPXPathViewer","zoomed","setZoomed","svgPath","normalizedRange","int","n","round","command","cmd","path","ArrayUtils","slice","computeSVGPathForGPX","stopPropagation","viewBox","width","transform","xmlns","fill","strokeLinejoin","stroke","strokeWidth","d","GPXInput","onSelectGpx","inputRef","onFileChosen","fileSelected","target","files","click","accept","onInput","icon","Button","textClassName","buttonStyle","ButtonStyle","EXERCISE_WITH_GPX_FIELDS","CardioExerciseType","GPXFilePicker","record","onChange","setGpx","hasGpxFieldInRecord","includes","gpxFile","then","catch"],"sourceRoot":""}